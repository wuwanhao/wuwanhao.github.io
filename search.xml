<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go 集成 RabbitMQ</title>
    <url>/2024/11/05/Go%E9%9B%86%E6%88%90RabbitMQ/</url>
    <content><![CDATA[<p>在 Go 的日常开发工作中，经常使用 RabbitMQ 这个消息中间件，本文是一些使用 Go 开发 RabbitMQ 的日常实践。<br> <span id="more"></span></p>
<p>本文使用 amqp091-go 这个 Go 库</p>
<h2 id="一、依赖拉取"><a href="#一、依赖拉取" class="headerlink" title="一、依赖拉取"></a>一、依赖拉取</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/rabbitmq/amqp091-<span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<h2 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/rabbitmq/amqp091-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RabbitMQ 对象</span></span><br><span class="line"><span class="keyword">type</span> RabbitMQ <span class="keyword">struct</span> &#123;</span><br><span class="line">	channel  *amqp091.Channel <span class="comment">// 连接通道</span></span><br><span class="line">	Name     <span class="type">string</span>           <span class="comment">// 队列名</span></span><br><span class="line">	exchange <span class="type">string</span>           <span class="comment">// 队列绑定的交换机名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个RabbitMQ对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(s <span class="type">string</span>)</span></span> *RabbitMQ &#123;</span><br><span class="line">	conn, err := amqp091.Dial(s)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	channel, e := conn.Channel()</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在通道中声明队列</span></span><br><span class="line">	q, e := channel.QueueDeclare(</span><br><span class="line">		<span class="string">&quot;&quot;</span>,    <span class="comment">// name</span></span><br><span class="line">		<span class="literal">false</span>, <span class="comment">// durable</span></span><br><span class="line">		<span class="literal">true</span>,  <span class="comment">// delete when unused</span></span><br><span class="line">		<span class="literal">false</span>, <span class="comment">// exclusive</span></span><br><span class="line">		<span class="literal">false</span>, <span class="comment">// no-wait</span></span><br><span class="line">		<span class="literal">nil</span>,   <span class="comment">// arguments</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mq := <span class="built_in">new</span>(RabbitMQ)</span><br><span class="line">	mq.channel = channel</span><br><span class="line">	mq.Name = q.Name</span><br><span class="line">	<span class="keyword">return</span> mq</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将队列绑定到交换机</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *RabbitMQ)</span></span> Bind(exchange <span class="type">string</span>) &#123;</span><br><span class="line">	e := q.channel.QueueBind(</span><br><span class="line">		q.Name,   <span class="comment">// queue name</span></span><br><span class="line">		<span class="string">&quot;&quot;</span>,       <span class="comment">// routing key</span></span><br><span class="line">		exchange, <span class="comment">// exchange</span></span><br><span class="line">		<span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line">		<span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 将队列绑定到的交换机的名称存储到 q.exchange 中</span></span><br><span class="line">	q.exchange = exchange</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接向指定队列中发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *RabbitMQ)</span></span> Send(queue <span class="type">string</span>, body <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	str, e := json.Marshal(body)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line">	e = q.channel.Publish(</span><br><span class="line">		<span class="string">&quot;&quot;</span>, <span class="comment">// exchange</span></span><br><span class="line">		queue,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		amqp091.Publishing&#123;</span><br><span class="line">			ReplyTo: q.Name,</span><br><span class="line">			Body:    []<span class="type">byte</span>(str),</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// publish</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *RabbitMQ)</span></span> Publish(exchange <span class="type">string</span>, body <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	str, e := json.Marshal(body)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	e = q.channel.Publish(</span><br><span class="line">		exchange,</span><br><span class="line">		<span class="string">&quot;&quot;</span>, <span class="comment">// queue 为空，通过exchange决定发往哪一个queue</span></span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		amqp091.Publishing&#123;</span><br><span class="line">			ReplyTo: q.Name,</span><br><span class="line">			Body:    []<span class="type">byte</span>(str),</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费队列中的消息，生成一个接收消息的go channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *RabbitMQ)</span></span> Consume() &lt;-<span class="keyword">chan</span> amqp091.Delivery &#123;</span><br><span class="line">	c, e := q.channel.Consume(</span><br><span class="line">		q.Name,</span><br><span class="line">		<span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="literal">true</span>,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		<span class="literal">false</span>,</span><br><span class="line">		<span class="literal">nil</span>,</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *RabbitMQ)</span></span> Close() &#123;</span><br><span class="line">	q.channel.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>First Post</title>
    <url>/2024/10/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! <span id="more"></span>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p>这是第一个文章</p>
]]></content>
  </entry>
</search>
