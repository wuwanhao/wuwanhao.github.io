<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>grpc</title>
    <link href="/2024/11/06/grpc/"/>
    <url>/2024/11/06/grpc/</url>
    
    <content type="html"><![CDATA[<h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><p>gPRC是一个高性能的开源的通用RPC框架 <span id="more"></span>，在GRPC中，称被调用方为server，调用方为client</p><p>gRPC会屏蔽底层细节，client只需直接调用定义好的方法，拿到预期的结果返回；同样的，对于server来说，还需要实现我们定义的方法，GRPC会帮我们屏蔽底层的实现细节，我们只需实现所定义的方法的具体逻辑即可</p><p><a href="#ighde">相比于HTTP，gRPC性能更高</a>，使用自定义<strong>协议和压缩</strong></p><p><img src="https://cos-1106-1257781114.cos.ap-guangzhou.myqcloud.com/img/1709349075606-2a0d596d-6874-473b-b6f5-2201f91eea87-20241106172153837.png"></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><font style="color:rgb(13, 13, 13);">当我们比较 gRPC 和传统的基于 HTTP&#x2F;1.1 的通信时，gRPC 的性能更高是相对于 HTTP&#x2F;1.1 而言的，而不是相对于整个 HTTP 协议。</font></p><p><font style="color:rgb(13, 13, 13);">gRPC 使用的是 HTTP&#x2F;2 协议，而 HTTP&#x2F;2 在很多方面相比于 HTTP&#x2F;1.1 有了很大的改进，这些改进也直接影响了 gRPC 的性能。下面是一些导致 gRPC 比传统的基于 HTTP&#x2F;1.1 的通信更高效的主要原因：</font></p><h3 id="1-多路复用（Multiplexing）"><a href="#1-多路复用（Multiplexing）" class="headerlink" title="1. 多路复用（Multiplexing）"></a><font style="color:rgb(13, 13, 13);">1. 多路复用（Multiplexing）</font></h3><ul><li><strong>HTTP&#x2F;2 多路复用</strong><font style="color:rgb(13, 13, 13);">：HTTP&#x2F;2 允许多个请求和响应在同一个 TCP 连接上交错进行，而不像 HTTP&#x2F;1.x 需要创建多个连接。这消除了 HTTP&#x2F;1.x 中的队头阻塞问题，并提高了资源利用率。gRPC 充分利用了这一特性，使得在单个连接上可以同时进行多个请求和响应的处理。</font></li></ul><h3 id="2-头部压缩（Header-Compression）"><a href="#2-头部压缩（Header-Compression）" class="headerlink" title="2. 头部压缩（Header Compression）"></a><font style="color:rgb(13, 13, 13);">2. 头部压缩（Header Compression）</font></h3><ul><li><strong>HTTP&#x2F;2 头部压缩</strong><font style="color:rgb(13, 13, 13);">：HTTP&#x2F;2 使用了 HPACK 算法对请求和响应的头部进行压缩，减少了通信时的数据量。对于 gRPC 这种多次小数据量请求的情况，这种压缩效果特别明显。</font></li></ul><h3 id="3-二进制传输（Binary-Framing）"><a href="#3-二进制传输（Binary-Framing）" class="headerlink" title="3. 二进制传输（Binary Framing）"></a><font style="color:rgb(13, 13, 13);">3. 二进制传输（Binary Framing）</font></h3><ul><li><strong>HTTP&#x2F;2 二进制传输</strong><font style="color:rgb(13, 13, 13);">：HTTP&#x2F;2 使用二进制帧进行数据传输，而不像 HTTP&#x2F;1.x 那样使用文本格式。这样减少了在序列化和反序列化数据时的开销，并且减少了网络传输的数据量。</font></li></ul><h3 id="4-流量控制（Flow-Control）"><a href="#4-流量控制（Flow-Control）" class="headerlink" title="4. 流量控制（Flow Control）"></a><font style="color:rgb(13, 13, 13);">4. 流量控制（Flow Control）</font></h3><ul><li><strong>HTTP&#x2F;2 流量控制</strong><font style="color:rgb(13, 13, 13);">：HTTP&#x2F;2 中引入了流量控制机制，可以防止过载一个接收方的情况发生。这对于长时间运行的连接或大量数据传输的应用程序非常有用，例如 gRPC。</font></li></ul><h3 id="5-服务器推送（Server-Push）"><a href="#5-服务器推送（Server-Push）" class="headerlink" title="5. 服务器推送（Server Push）"></a><font style="color:rgb(13, 13, 13);">5. 服务器推送（Server Push）</font></h3><ul><li><strong>HTTP&#x2F;2 服务器推送</strong><font style="color:rgb(13, 13, 13);">：HTTP&#x2F;2 允许服务器在客户端请求之前推送资源。这对于减少客户端请求的往返次数和加快加载速度非常有帮助。</font></li></ul><p><font style="color:rgb(13, 13, 13);">综上所述，gRPC 基于 HTTP&#x2F;2 协议的特性使得它在很多方面都比传统的基于 HTTP&#x2F;1.1 的通信更高效。因此，当我们说 gRPC 的性能比传统的 HTTP 更好时，我们实际上是在指 gRPC 相对于 HTTP&#x2F;1.1 在性能上的提升。对于 HTTP&#x2F;2 而言，它为 gRPC 提供了一个更高效、更快速的通信基础。</font></p><h2 id="微服务中网关的作用"><a href="#微服务中网关的作用" class="headerlink" title="微服务中网关的作用"></a>微服务中网关的作用</h2><ol><li>网关根据不同的请求，将其转发到不同的服务（路由功能），由于入口的一致性，可以在网关上实现公共的一些功能</li><li>可以将公共的功能抽取出来，形成一个新的服务，比如 统一认证中心</li></ol><h2 id="ProtoBuf"><a href="#ProtoBuf" class="headerlink" title="ProtoBuf"></a>ProtoBuf</h2><p>grpc默认使用protobuf</p><p><img src="https://cos-1106-1257781114.cos.ap-guangzhou.myqcloud.com/img/1709350463565-ededc5eb-52c7-45a6-8342-8988b8da54d1.png"></p><h2 id="链接与协议"><a href="#链接与协议" class="headerlink" title="链接与协议"></a>链接与协议</h2><p><font style="color:rgb(13, 13, 13);">gRPC 使用了 HTTP&#x2F;2 作为传输层协议，而 HTTP&#x2F;2 又是基于 TCP 连接的。当 gRPC 客户端与服务器建立连接时，实际上是在 TCP 连接上运行 HTTP&#x2F;2 协议。这意味着 gRPC 利用了 TCP 提供的可靠性和连接管理特性，同时又通过 HTTP&#x2F;2 的多路复用、头部压缩等特性提高了性能。</font></p><p><font style="color:rgb(13, 13, 13);">具体步骤如下：</font></p><ol><li><font style="color:rgb(13, 13, 13);">gRPC 客户端与服务器建立 TCP 连接。</font></li><li><font style="color:rgb(13, 13, 13);">在这个 TCP 连接上，双方交换 HTTP&#x2F;2 协议的帧（frames），这些帧包含了 gRPC 的请求和响应数据。</font></li><li><font style="color:rgb(13, 13, 13);">HTTP&#x2F;2 协议负责将这些帧分割成更小的帧，并在一个连接上复用多个请求和响应，以提高效率。</font></li><li><font style="color:rgb(13, 13, 13);">gRPC 在这些帧中使用 Protocol Buffers 进行序列化和反序列化，从而进行有效的数据交换。</font></li></ol><p><font style="color:rgb(13, 13, 13);">因此，尽管 gRPC 抽象了底层的网络细节，但它的底层连接仍然是基于 TCP 的。这使得 gRPC 具有 TCP 的可靠性和连接管理特性，同时也利用了 HTTP&#x2F;2 的高效传输机制，从而实现了高性能和可靠的远程过程调用（RPC）。</font></p><p><font style="color:rgb(13, 13, 13);">Protocol Buffers（简称 Protobuf）是 Google 开发的一种用于序列化结构化数据的语言无关、平台无关、可扩展的机制。它不是一种网络传输协议，而是一种数据序列化的格式。</font></p><p><font style="color:rgb(13, 13, 13);">Protobuf 的主要目的是提供一种有效率、简洁的方法来序列化结构化数据，以便于存储或传输。它可以将结构化数据转换为二进制格式，从而节省存储空间和网络传输带宽。</font></p><font style="color:rgb(13, 13, 13);">  </font><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Pb的安装"><a href="#Pb的安装" class="headerlink" title="Pb的安装"></a>Pb的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install protobuf<br></code></pre></td></tr></table></figure><h3 id="gRPC的安装"><a href="#gRPC的安装" class="headerlink" title="gRPC的安装"></a>gRPC的安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">//go mod拉一下这两个库<br>go get google.golang.org/grpc<br>go get google.golang.org/protobuf<br></code></pre></td></tr></table></figure><h3 id="安装GRPC的Go代码生成器"><a href="#安装GRPC的Go代码生成器" class="headerlink" title="安装GRPC的Go代码生成器"></a>安装GRPC的Go代码生成器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">go install google.golang.org/protobuf/cmd/protoc-gen-go@latest<br>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest<br></code></pre></td></tr></table></figure><h2 id="Go接入gRPC简单实践"><a href="#Go接入gRPC简单实践" class="headerlink" title="Go接入gRPC简单实践"></a>Go接入gRPC简单实践</h2><h3 id="1-编写proto文件"><a href="#1-编写proto文件" class="headerlink" title="1.编写proto文件"></a>1.编写proto文件</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">// 指定当前proto语法的版本</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-comment">// option go_package = &quot;path;name&quot;;</span><br><span class="hljs-comment">// path表示自动生成的go文件的存放地址，会自动生成目录</span><br><span class="hljs-comment">// name表示生成的go文件的包名</span><br><span class="hljs-keyword">option</span> go_package=<span class="hljs-string">&quot;../service&quot;</span>;<br><br><span class="hljs-comment">// 指定文件生成出来的package</span><br><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ProductRequest</span>&#123;<br>  <span class="hljs-type">int32</span> prod_id = <span class="hljs-number">1</span>; <span class="hljs-comment">//1代表顺序</span><br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ProductResponse</span>&#123;<br>  <span class="hljs-type">int32</span> prod_stock = <span class="hljs-number">1</span>; <span class="hljs-comment">//1代表顺序</span><br>&#125;<br><br><span class="hljs-keyword">service </span><span class="hljs-title class_">ProdService</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> GetProductStock(ProductRequest) <span class="hljs-keyword">returns</span> (ProductResponse)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编译proto文件生成service代码"><a href="#2-编译proto文件生成service代码" class="headerlink" title="2.编译proto文件生成service代码"></a>2.编译proto文件生成service代码</h3><p>进入proto文件所在位置，执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">protoc --go_out=../service --go_opt=paths=source_relative --go-grpc_out=../service --go-grpc_opt=paths=source_relative ./product.proto<br></code></pre></td></tr></table></figure><ol><li>protoc</li></ol><p>这是 Protocol Buffers 的编译器命令行工具，用于将 .proto 文件编译成相应语言的代码。</p><ol start="2"><li>–go_out&#x3D;..&#x2F;service</li></ol><p>这部分是 protoc 命令的选项，告诉编译器生成的 Go 代码放置在 ..&#x2F;service 目录中。具体来说：</p><ol start="3"><li><strong>–go_out</strong>：表示要生成的是 Go 代码。<br>..&#x2F;service：是生成的 Go 代码的目标目录。</li><li><strong>–go_opt&#x3D;paths&#x3D;source_relative</strong><br>这个选项告诉编译器生成的 Go 代码的导入路径是相对于 .proto 文件所在的目录的。这是为了确保生成的代码可以正确地导入依赖的其他包。</li><li><strong>–go-grpc_out&#x3D;..&#x2F;service</strong><br>这部分告诉 protoc 同时生成 gRPC 相关的代码，放置在 ..&#x2F;service 目录中。具体来说：</li><li><strong>–go-grpc_out：</strong>表示要生成的是 gRPC 相关的 Go 代码。</li><li><strong>..&#x2F;service</strong>：是生成的 gRPC 相关的 Go 代码的目标目录。</li><li><strong>–go-grpc_opt&#x3D;paths&#x3D;source_relative</strong><br>与 –go_opt&#x3D;paths&#x3D;source_relative 类似，这个选项告诉编译器生成的 gRPC 相关的 Go 代码的导入路径是相对于 .proto 文件所在的目录的。</li><li><strong>.&#x2F;product.proto</strong><br>这是要编译的 .proto 文件的路径。在这个例子中，product.proto 文件位于当前目录（.）下。</li></ol><p>这个命令的作用是：</p><ul><li>编译 product.proto 文件。</li><li>生成对应的 Go 代码，并将生成的 Go 代码放置在 ..&#x2F;service 目录中。</li><li>生成的 Go 代码的导入路径是相对于 product.proto 文件所在目录的。</li><li>同时生成 gRPC 相关的 Go 代码，并将生成的 gRPC 相关的 Go 代码也放置在 ..&#x2F;service 目录中。</li><li>生成的 gRPC 相关的 Go 代码的导入路径也是相对于 product.proto 文件所在目录的。</li><li></li></ul><h3 id="3-编写业务层的service文件来使用生成的go代码"><a href="#3-编写业务层的service文件来使用生成的go代码" class="headerlink" title="3.编写业务层的service文件来使用生成的go代码"></a>3.编写业务层的service文件来使用生成的go代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br>)<br><br><span class="hljs-comment">// 向外暴露的服务</span><br><span class="hljs-keyword">var</span> ProductService = &amp;productService&#123;&#125;<br><br><span class="hljs-comment">// 实现接口</span><br><span class="hljs-keyword">type</span> productService <span class="hljs-keyword">struct</span> &#123;<br>UnimplementedProdServiceServer<br>&#125;<br><br><span class="hljs-comment">// 接口方法的实现</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *productService)</span></span> GetProductStock(context context.Context, request *ProductRequest) (*ProductResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 实现具体的业务逻辑</span><br>stock := p.getStockById(request.GetProdId())<br><span class="hljs-keyword">return</span> &amp;ProductResponse&#123;ProdStock: stock&#125;, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *productService)</span></span> getStockById(id <span class="hljs-type">int32</span>) <span class="hljs-type">int32</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">100</span> + id<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-服务端代码"><a href="#4-服务端代码" class="headerlink" title="4.服务端代码"></a>4.服务端代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;learn-protobuf/service&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个gRPC server</span><br>rpcServer := grpc.NewServer()<br>    <br><span class="hljs-comment">// 将接口的实现类注册到grpcServer</span><br>service.RegisterProdServiceServer(rpcServer, service.ProductService)<br><br>    <span class="hljs-comment">// 启动端口监听</span><br>listen, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8003&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;启动监听出错&quot;</span>)<br>&#125;<br><br>    <span class="hljs-comment">// 启动server</span><br>err = rpcServer.Serve(listen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;启动RPC服务出错&quot;</span>)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;启动GRPC服务端成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-客户端代码"><a href="#5-客户端代码" class="headerlink" title="5.客户端代码"></a>5.客户端代码</h3><p>将服务端生成的go代码完整拷贝一份到客户端service层</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;learn-protobuf/service&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建与服务端的grpc连接</span><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;:8003&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;服务端出错&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>    <span class="hljs-comment">// 创建一个客户端</span><br>prodClient := service.NewProdServiceClient(conn)<br>request := &amp;service.ProductRequest&#123;<br>ProdId: <span class="hljs-number">12</span>,<br>&#125;<br>    <span class="hljs-comment">// 客户端调用本地代码，执行RPC操作，获取结果</span><br>stockResponse, err := prodClient.GetProductStock(context.Background(), request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;查询库存出错&quot;</span>, err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;查询库存成功&quot;</span>, stockResponse)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务端流式gRPC"><a href="#服务端流式gRPC" class="headerlink" title="服务端流式gRPC"></a>服务端流式gRPC</h2><h3 id="1-定义流式gRPC所用的proto文件"><a href="#1-定义流式gRPC所用的proto文件" class="headerlink" title="1.定义流式gRPC所用的proto文件"></a>1.定义流式gRPC所用的proto文件</h3><p>服务端流式rpc，需在响应参数前面加上 stream 关键字</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">// 指定当前proto语法的版本</span><br>syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-comment">// option go_package = &quot;path;name&quot;;</span><br><span class="hljs-comment">// path表示自动生成的go文件的存放地址，会自动生成目录</span><br><span class="hljs-comment">// name表示生成的go文件的包名</span><br><span class="hljs-keyword">option</span> go_package=<span class="hljs-string">&quot;../service&quot;</span>;<br><br><span class="hljs-comment">// 指定文件生成出来的package</span><br><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-comment">// 定义请求信息</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">SimpleRequest</span> &#123;<br>  <span class="hljs-type">string</span> data = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 定义流式响应信息</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">StreamResponse</span> &#123;<br>  <span class="hljs-type">string</span> stream_value = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 服务端流式rpc，需在响应参数前面加上 stream 关键字</span><br><span class="hljs-keyword">service </span><span class="hljs-title class_">StreamServer</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> ListValue(SimpleRequest) <span class="hljs-keyword">returns</span> (stream StreamResponse)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编译proto文件生成service代码-1"><a href="#2-编译proto文件生成service代码-1" class="headerlink" title="2.编译proto文件生成service代码"></a>2.编译proto文件生成service代码</h3><p>进入proto文件所在位置，执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">protoc --go_out=../service --go_opt=paths=source_relative --go-grpc_out=../service --go-grpc_opt=paths=source_relative ./server_stream.proto<br></code></pre></td></tr></table></figure><p>命令含义如之前</p><h3 id="3-编写业务层的service文件来使用生成的go代码-1"><a href="#3-编写业务层的service文件来使用生成的go代码-1" class="headerlink" title="3.编写业务层的service文件来使用生成的go代码"></a>3.编写业务层的service文件来使用生成的go代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;strconv&quot;</span><br><br><span class="hljs-comment">// 定义我们的服务，实现接口</span><br><span class="hljs-keyword">type</span> StreamService <span class="hljs-keyword">struct</span> &#123;<br>UnimplementedStreamServerServer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *StreamService)</span></span> ListValue(req *SimpleRequest, srv StreamServer_ListValueServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 实现具体的业务逻辑，即向流中发送消息，默认每次发送消息的最大长度为`math.MaxInt32`bytes</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>err := srv.Send(&amp;StreamResponse&#123;<br>StreamValue: req.Data + strconv.Itoa(i),<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-服务端代码-1"><a href="#4-服务端代码-1" class="headerlink" title="4.服务端代码"></a>4.服务端代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;learn-protobuf/service&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-comment">// 服务端流式grpc</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建grpc服务器，设置单次最大接收消息大小为1024*1024*4 bytes，即4MB；最大单次响应大小为 math.MaxInt32 bytes</span><br>rpcServer := grpc.NewServer(grpc.MaxRecvMsgSize(<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">4</span>), grpc.MaxSendMsgSize(math.MaxInt32))<br><span class="hljs-comment">// 将接口的实现注册到grpcServer，注册一个流式Server</span><br>service.RegisterStreamServerServer(rpcServer, &amp;service.StreamService&#123;&#125;)<br><br>listen, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8003&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;启动监听出错&quot;</span>)<br>&#125;<br><br>err = rpcServer.Serve(listen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;启动RPC服务出错&quot;</span>)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;启动GRPC服务端成功&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-客户端代码-1"><a href="#5-客户端代码-1" class="headerlink" title="5.客户端代码"></a>5.客户端代码</h3><p>将服务端生成的go代码完整拷贝一份到客户端service层</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br><span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;learn-protobuf/stream_client/service&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建一个发送结构体</span><br>simpleRequest := service.SimpleRequest&#123;<br>Data: <span class="hljs-string">&quot;Stream Server gRPC&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// 创建grpc连接</span><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;:8003&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;服务端出错&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br>    <span class="hljs-comment">// 流式grpc客户端</span><br>prodStreamClient := service.NewStreamServerClient(conn)<br><br>    <span class="hljs-comment">// 调用GRPC方法</span><br>stream, err := prodStreamClient.ListValue(context.Background(), &amp;simpleRequest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Call List Str Error: %v&quot;</span>, err)<br>&#125;<br><br>    <span class="hljs-comment">// 阻塞</span><br><span class="hljs-keyword">for</span> &#123;<br>streamResponse, err := stream.Recv()<br><span class="hljs-comment">// 判断消息流是否已经结束</span><br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;ListStr get stream err: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// 打印返回值</span><br>log.Println(streamResponse.StreamValue)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go 集成 RabbitMQ</title>
    <link href="/2024/11/05/Go%E9%9B%86%E6%88%90RabbitMQ/"/>
    <url>/2024/11/05/Go%E9%9B%86%E6%88%90RabbitMQ/</url>
    
    <content type="html"><![CDATA[<p>在 Go 的日常开发工作中，经常使用 RabbitMQ 这个消息中间件，本文是一些使用 Go 开发 RabbitMQ 的日常实践。<br> <span id="more"></span></p><p>本文使用 amqp091-go 这个 Go 库</p><h2 id="一、依赖拉取"><a href="#一、依赖拉取" class="headerlink" title="一、依赖拉取"></a>一、依赖拉取</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get github.com/rabbitmq/amqp091-<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure><h2 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> rabbitmq<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;github.com/rabbitmq/amqp091-go&quot;</span><br>)<br><br><span class="hljs-comment">// RabbitMQ 对象</span><br><span class="hljs-keyword">type</span> RabbitMQ <span class="hljs-keyword">struct</span> &#123;<br>channel  *amqp091.Channel <span class="hljs-comment">// 连接通道</span><br>Name     <span class="hljs-type">string</span>           <span class="hljs-comment">// 队列名</span><br>exchange <span class="hljs-type">string</span>           <span class="hljs-comment">// 队列绑定的交换机名</span><br>&#125;<br><br><span class="hljs-comment">// 新建一个RabbitMQ对象</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> *RabbitMQ &#123;<br>conn, err := amqp091.Dial(s)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>channel, e := conn.Channel()<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><br><span class="hljs-comment">// 在通道中声明队列</span><br>q, e := channel.QueueDeclare(<br><span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-comment">// name</span><br><span class="hljs-literal">false</span>, <span class="hljs-comment">// durable</span><br><span class="hljs-literal">true</span>,  <span class="hljs-comment">// delete when unused</span><br><span class="hljs-literal">false</span>, <span class="hljs-comment">// exclusive</span><br><span class="hljs-literal">false</span>, <span class="hljs-comment">// no-wait</span><br><span class="hljs-literal">nil</span>,   <span class="hljs-comment">// arguments</span><br>)<br><br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><br>mq := <span class="hljs-built_in">new</span>(RabbitMQ)<br>mq.channel = channel<br>mq.Name = q.Name<br><span class="hljs-keyword">return</span> mq<br>&#125;<br><br><span class="hljs-comment">// 将队列绑定到交换机</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *RabbitMQ)</span></span> Bind(exchange <span class="hljs-type">string</span>) &#123;<br>e := q.channel.QueueBind(<br>q.Name,   <span class="hljs-comment">// queue name</span><br><span class="hljs-string">&quot;&quot;</span>,       <span class="hljs-comment">// routing key</span><br>exchange, <span class="hljs-comment">// exchange</span><br><span class="hljs-literal">false</span>,    <span class="hljs-comment">// no-wait</span><br><span class="hljs-literal">nil</span>,      <span class="hljs-comment">// arguments</span><br>)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><span class="hljs-comment">// 将队列绑定到的交换机的名称存储到 q.exchange 中</span><br>q.exchange = exchange<br>&#125;<br><br><span class="hljs-comment">// 直接向指定队列中发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *RabbitMQ)</span></span> Send(queue <span class="hljs-type">string</span>, body <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>str, e := json.Marshal(body)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br>e = q.channel.Publish(<br><span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// exchange</span><br>queue,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp091.Publishing&#123;<br>ReplyTo: q.Name,<br>Body:    []<span class="hljs-type">byte</span>(str),<br>&#125;)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// publish</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *RabbitMQ)</span></span> Publish(exchange <span class="hljs-type">string</span>, body <span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>str, e := json.Marshal(body)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><br>e = q.channel.Publish(<br>exchange,<br><span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// queue 为空，通过exchange决定发往哪一个queue</span><br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br>amqp091.Publishing&#123;<br>ReplyTo: q.Name,<br>Body:    []<span class="hljs-type">byte</span>(str),<br>&#125;)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 消费队列中的消息，生成一个接收消息的go channel</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *RabbitMQ)</span></span> Consume() &lt;-<span class="hljs-keyword">chan</span> amqp091.Delivery &#123;<br>c, e := q.channel.Consume(<br>q.Name,<br><span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-literal">true</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">false</span>,<br><span class="hljs-literal">nil</span>,<br>)<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(e)<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">// 关闭连接</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *RabbitMQ)</span></span> Close() &#123;<br>q.channel.Close()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
